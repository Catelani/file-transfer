plugins {
  id 'nebula.dependency-recommender' version '3.6.3'
  id 'nebula.dependency-lock' version '4.3.0'
  id 'nebula.nebula-release' version '4.0.1'
  id 'nebula.provided-base' version '3.1.0'
  id 'nebula.optional-base' version '3.1.0'
}

allprojects {
  apply plugin: 'nebula.nebula-release'
}

subprojects {
  apply plugin: 'java'

  // configurando o compilador para UTF-8
  compileJava.options.encoding = 'UTF-8'

  javadoc {
    options.charSet = 'UTF-8'
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  // nebula
  // TODO Adicionar os plugins de source e javadoc, precisa corrigir coisas com a documentação
//  apply plugin: 'nebula.source-jar'
//  apply plugin: 'nebula.javadoc-jar'
  apply plugin: 'nebula.dependency-recommender'
  apply plugin: 'nebula.dependency-lock'
  apply plugin: 'nebula.provided-base'
  apply plugin: 'nebula.optional-base'

  // QA plugins
  apply plugin: 'pmd'
  apply plugin: 'findbugs'
  apply plugin: 'jacoco'
  apply plugin: 'jdepend'
  apply plugin: 'build-dashboard'

  group 'br.com.catelani.santander'

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  repositories {
    mavenCentral()
  }

  dependencies {
    // logs
    compile 'org.slf4j:slf4j-api'
    provided group: 'ch.qos.logback', name: 'logback-classic', optional // log plugavel

    // csv parser
    compile group: 'com.univocity', name: 'univocity-parsers'

    // para melhorar a interação com o IntelliJ
    provided 'org.jetbrains:annotations'

    // google guice
    compile 'com.google.inject:guice'
    testCompile group: 'com.google.inject.extensions', name: 'guice-testlib'

    // Para gerar ascii tables
    compile 'de.vandermeer:asciitable', optional

    // lombok
    provided group: 'org.projectlombok', name: 'lombok'

    // tests
    testCompile group: 'junit', name: 'junit'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all'
    testCompile group: 'com.github.stefanbirkner', name: 'system-rules'
  }

  def recomendationsFile = rootProject.file('dependencies-version.properties')

  dependencyRecommendations {
    propertiesFile file: recomendationsFile
  }

  pmd {
    sourceSets = [sourceSets.main]
    toolVersion = '5.4.2'
  }

  findbugs {
    sourceSets = [sourceSets.main]
    excludeFilter = file("${rootProject.projectDir}/config/findbugs/ignore.xml")
  }

  jdepend {
    sourceSets = [sourceSets.main]
  }

// qa plugin configuration to export html instead of xml
  tasks.withType(FindBugs) {
    reports {
      html.enabled = true
      xml.enabled = false
    }
  }

  tasks.withType(Pmd) {
    reports {
      html.enabled = true
      xml.enabled = false
    }
  }

  tasks.withType(JDependReports) {
    reports {
      xml.enabled = true
      csv.enabled = false
    }
  }

  // TODO Verificar se todos estão sendo gerado corretamente
  task jdependReport(dependsOn: jdependMain, group: 'verification', description: 'Generates a HTML report after executing jdepend checks.') << {
    ant.xslt(in: "${buildDir}/reports/jdepend/main.xml",
             style: "${rootProject.projectDir}/config/jdepend/jdepend.xsl",
             out: "$reporting.baseDir/jdepend/main.html")
  }

  check {
    dependsOn += ['jdependReport']
  }

  jacoco {
    toolVersion = '0.7.7.201606060606'
  }

  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
    }
  }

  jar {
    manifest {
      attributes('Implementation-Title': project.name,
                 'Implementation-Version': project.version,
                 'Implementation-Author': 'Catelani')
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.14.1'
}

task importJacocoTestReportOnTeamCity << {
  logger.quiet("Notificando TeamCity para importar informações do JaCoCo")

  def projetos = ['file-transfer-cli', 'file-transfer-core']
  def dataPath = projetos.collect { "${project(it).buildDir}/jacoco/test.exec" }.join(' ')

  logger.quiet(
      "##teamcity[jacocoReport dataPath='${dataPath}' includes='br.com.catelani.santander.filetransfer.*']")
}